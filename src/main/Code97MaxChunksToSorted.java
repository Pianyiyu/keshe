package main;
//数组arr是[0, 1, ..., arr.length - 1]的一种排列，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。
//
//        我们最多能将数组分成多少块？
//
//        示例 1:
//
//        输入: arr = [4,3,2,1,0]
//        输出: 1
//        解释:
//        将数组分成2块或者更多块，都无法得到所需的结果。
//        例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。
//        示例 2:
//
//        输入: arr = [1,0,2,3,4]
//        输出: 4
//        解释:
//        我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。
//        然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。
public class Code97MaxChunksToSorted {
    public int maxChunksToSorted(int[] arr) {
//        数组arr是[0, 1, ..., arr.length - 1]的一种排列
        int count = 0;
        int pos = 0;
        for (int i = 0; i < arr.length; i++){
            pos = Math.max(pos, arr[i]);
            //最大值等于下标，说明这个区间的数升序排序后刚好等于下标
            //比如下标为5时 此时数字的个数为6个，允许的最大值就时5（0，1，2，3，4，5），所有时可以升序排列的。
            if (i == pos){
                count++;
            }
        }
        return count;
    }
}
